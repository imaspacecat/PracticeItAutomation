1.
Computers use binary numbers because it's easier to build electronic devices reliably if they only have to distinguish between two electric states.
2.
6 = 110 44 = 101100 72 = 1001000 131 = 10000011
3.
100 = 4 1011 = 11 101010 = 42 1001110 = 78
4.
Make the cookie batter: Mix the dry ingredients. Cream the butter and sugar. Beat in the eggs. Stir in the dry ingredients. Bake the cookies: Set the oven for the appropriate temperature. Set the timer. Place the cookies into the oven. Allow the cookies to bake. Add frosting and sprinkles: Mix the ingredients for the frosting. Spread frosting and sprinkles onto the cookies.
5.
MyProgram.java is a source code file typed by the programmer, and MyProgram.class is a compiled executable class file that is run by the computer.
6.
The legal identifiers shown are println, AnnualSalary, ABC, sum_of_data, _average, and B4.
7.
d. System.out.println("Hello, world!");
8.
"Quotes"
Slashes \//
How '"confounding' "\" it is!
9.
name    age     height
Archie  17      5'9"
Betty   17      5'6"
Jughead 16      6'
10.
Shaq is 7'1
The string "" is an empty message.
\'""
11.
a       b       c
\\
'
"""
C:
in      he downward spiral
12.
Dear "DoubleSlash" magazine,

        Your publication confuses me.  Is it
a \\ slash or a //// slash?

Sincerely,
Susan "Suzy" Smith
13.
System.out.println("\"Several slashes are sometimes seen,\"");
System.out.println("said Sally. \"I've said so.\" See?");
System.out.println("\\ / \\\\ // \\\\\\ ///");
14.
System.out.println("This is a test of your");
System.out.println("knowledge of \"quotes\" used");
System.out.println("in 'string literals.'");
System.out.println();
System.out.println("You're bound to \"get it right\"");
System.out.println("if you read the section on");
System.out.println("''quotes.''");
15.
System.out.println("/ \\ // \\\\ /// \\\\\\");
16.
System.out.println("Twas brillig and the ");
System.out.println("  slithy toves did gyre and");
System.out.println("gimble");
System.out.println();
System.out.println("in the wabe.");
17.
some lines of code
have // characters on them
which means 
lines can also
have /* and */ characters
of comment.
18.
line 1: The keyword class is missing. line 3: A semicolon is missing. line 4: The word Println should not be capitalized.
19.
line 2: The keyword void is missing. line 2: The word string should be capitalized. line 4: A closing " mark is missing. line 5: A closing } brace is missing.
20.
line 1: A { brace is missing. line 2: The word args is missing. line 8: The comment on lines 8-10 accidentally comments out lines 9-10 of the program. Using // comments would fix the problem. line 11: A closing right parenthesis ) is missing.
21.
b. public static void example() {
22.
This is message1.
This is message2.
This is message1.
Done with message2.
Done with main.
23.
Inside first method
Inside third method
Inside first method
Inside second method
Inside first method
Inside second method
Inside first method
Inside third method
Inside first method
Inside second method
Inside first method
24.
Inside first method
Inside first method
Inside second method
Inside first method
Inside third method
Inside second method
Inside first method
Inside first method
Inside second method
Inside first method
Inside third method
25.
Inside second method
Inside first method
Inside first method
Inside second method
Inside first method
Inside third method
Inside first method
Inside second method
Inside first method
26.
I am method 1.
I am method 1.
I am method 2.
I am method 3.
I am method 1.
I am method 1.
I am method 2.
I am method 1.
I am method 2.
I am method 3.
I am method 1.
27.
I am method 1.
I am method 1.
I am method 1.
I am method 2.
I am method 3.
I am method 1.
I am method 2.
I am method 1.
I am method 1.
I am method 2.
I am method 3.
28.
I am method 1.
I am method 2.
I am method 1.
I am method 1.
I am method 2.
I am method 3.
I am method 1.
I am method 1.
I am method 2.
29.
line 1: The class name should be LotsOfErrors (no space). line 2: The word void should appear after static. line 2: String should be String[]. line 3: System.println should be System.out.println. line 3: "Hello, world!) should be "Hello, world!"). line 4: There should be a semicolon after message(). line 7: There should be a () after message. line 8: System.out println should be System.out.println. line 8: cannot"; should be cannot");. line 9: The phrase "errors" cannot appear inside a String. 'errors' or \"errors\" would work. line 11: There should be a closing } brace.
30.
Syntax error: The program would not compile because its class name (Demonstration) would not match its file name (Example.java). Different program output: The program would not run because Java would be unable to find the main method. Different program output: There would now be a blank line between the two printed messages. Syntax error: The program would not compile because the main method would be calling a method (displayRule) that no longer existed. No effect: The program would still compile successfully and produce the same output. Different program output: The output would now have no line break between "The first rule" and "of Java Club is," in its output.
31.
// Suzy Student, Fall 2048
// This program prints a message about proper formatting
// of Java programs.
public class GiveAdvice {
    public static void main(String[] args) {
        System.out.println("Programs can be easy or");
        System.out.println("difficult to read, depending");
        System.out.println("upon their format.");
        System.out.println();
        System.out.println("Everyone, including yourself,");
        System.out.println("will be happier if you choose");
        System.out.println("to format your programs.");
    }
}
32.
// Suzy Student, Fall 2048
// This program prints a cautionary message about messy formatting
// of Java programs.
public class Messy {
    public static void main(String[] args) {
        message();
        System.out.println();
        message();
    }

    public static void message() {
        System.out.println("I really wish that");
        System.out.println("I had formatted my source");
        System.out.println("code correctly!");
    }
}
-------------------------------------------------
1.
Legal int literals: 22, -1, and -6875309
2.
d. 11
3.
8 11 6 4 33 -16 6.4 6 30 1 7 5 2 18 3 4 4 15 8 1
4.
9.0 9.6 2.2 6.0 6.0 8.0 1.25 3.0 3.0 3.0 5.0 6.4 37.0 8.5 9.6 4.0 4.8
5.
11 "2 + 2 34" "2 2 + 3 4" "7 2 + 2" "2 + 2 7" "(2 + 2) 7" "hello 34 8"
6.
c. double grade = 4.0;
7.
int age;
String gender;
double height;
int weight;
8.
String year;
int numberOfCourses;
double gpa;
9.
Last digit: number % 10
10.
line 4: There should be a + between is and x. line 4: Variable x has not yet been given any value. line 6: Variable x is being redeclared. The word int should be omitted. line 6: Variable x is being given a value of the wrong type (double). line 7: The + x should be outside the quotes. line 10: The word int should be omitted. line 11: The word and should be surrounded by quotes.
11.
Second-to-last digit: (number % 100) / 10 or (number / 10) % 10 Third-to-last digit: (number % 1000) / 100 or (number / 100) % 10
12.
d. 10
13.
a: 6
b: 9
c: 16
14.
first: 19
second: 8
 The code swaps the values of the variables first and second.
15.
int first = 8, second = 19;
first += second;
second = first - second;
first -= second;
16.
i: 4
j: 2
k: 1
17.
46
36
23
13
18.
double y = x * (x * (x * (x * 12.3 - 9.1) + 19.3) - 4.6) + 34.2;
19.
public class ComputePay {
    public static void main(String[] args) {
        // Calculate my pay at work, based on how many hours I worked each day
        int totalHours = 4 + 5 + 8 + 4;
        double salary = 8.75;
        double pay = totalHours * salary;
        double taxRate = 0.20;
        double taxesOwed = pay * taxRate;
        
        System.out.println("My total hours worked:");
        System.out.println(totalHours);
        System.out.println("My hourly salary:");
        System.out.println("$" + salary);
        System.out.println("My total pay:");
        System.out.println(pay);
        System.out.println("My taxes owed:");
        System.out.println(taxesOwed);
    }
}
20.
// This program computes the total amount owed for a meal,
// assuming 8% tax and a 15% tip.
public class Receipt {
    public static void main(String[] args) {
        int subtotal = 38 + 40 + 30;
        System.out.println("Subtotal:");
        System.out.println(subtotal);
        
        double tax = subtotal * .08;
        System.out.println("Tax:");
        System.out.println(tax);
        
        double tip = subtotal * .15;
        System.out.println("Tip:");
        System.out.println(tip);
        
        double total = subtotal + tax + tip;
        System.out.println("Total:");
        System.out.println(total);
    }
}
21.
public class Count2 {
    public static void main(String[] args) {
        for (int i = 1; i <= 4; i++) {
            System.out.println("2 times " + i + " = " + (2 * i));
        }
    }
}
22.
2 * count 15 * count - 11 -10 * count + 40 4 * count - 11 -3 * count + 100
23.
for (int i = 1; i <= 6; i++) {
    // your code here
    System.out.println(18 * i - 22);
}
24.
4
2
25.
24 1
22 2
19 3
15 4
10 5
26.
+---+
\   /
/   \
\   /
/   \
\   /
/   \
+---+
27.
How many lines
How many lines
How many lines
are printed?
28.
T-minus 5, 4, 3, 2, 1, Blastoff!
29.
1 2 3 4 5 6 7 8 9 10
2 4 6 8 10 12 14 16 18 20
3 6 9 12 15 18 21 24 27 30
4 8 12 16 20 24 28 32 36 40
5 10 15 20 25 30 35 40 45 50
30.
*
        ***
       *****
      *******
     *********
    ***********
   *************
  ***************
 *****************
*******************
31.
****!****!****!
****!****!****!
32.
************!
************!
33.
*!*!*!*!
*!*!*!*!
*!*!*!*!
*!*!*!*!
*!*!*!*!
*!*!*!*!
34.
The loop prints every third number, not every odd number. The statement count = count + 2 on line 8 should be moved into the loop header instead of count++. line 12: The variable count is no longer defined (its scope is limited to the for loop). It should be declared before the loop begins rather than inside the loop's header. line 12: Too large a value is printed for the final odd number; count should be printed, not count + 2. line 20: It is illegal to try to assign a new value to a constant such as MAX_ODD. One way to fix this would be to write two methods: one to print the odds up to 21 and a second to print the odds up to 11. (Admittedly, this solution is redundant. A better solution to this kind of problem involves parameter passing, which will be demonstrated in later chapters.)
35.
The result is: 55
36.
2 * line + 2 * SIZE 4 * line + (3 * SIZE) -line + (2 * SIZE + 3)
37.
line \ ! / 1 0 22 0 2 2 18 2 3 4 14 4 4 6 10 6 5 8 6 8 6 10 2 10 expression for \ and /: 2 * line - 2 expression for !: -4 * line + 26
38.
line \ ! / 1 0 14 0 2 2 10 2 3 4 6 4 4 6 2 6 expression for \ and /: 2 * line - 2 expression for !: -4 * line + 18 generalized for constant: -4 * line + (4 * SIZE + 2)
-------------------------------------------------
1.
e. public static void example(int x, int y) {
2.
15 42
10 25
3.
line 5: cannot use variable y without declaring and initializing it line 5: cannot declare the type of y in the method call line 6: cannot call printer without the correct number of parameters (2, in this case) line 7: cannot call printer by passing the correct type of parameters (double, in this case) line 8: cannot refer to the variable z: it is in scope inside printer, not main line 11: must provide a type for x line 11: must provide a variable name for the second parameter line 12: must refer to the parameters using the exact same spelling line 13: cannot refer to variables in main that were not passed into printer as a parameter
4.
1 3 5
1 3 5 7 9 11 13 15
1 3 5 7 9 11 13 15 17 19 21 23 25
5.
1 2 3 4 5
1 2 3 4 5 6 7
1 2 3 4
number = 8
6.
three times two = 6
1 times three = 28
1 times 1 = 42
three times 1 = 2
1 times eight = 20
7.
whom and who like it
it and him like whom
whom and him like him
stu and boo like who
her and him like who
8.
touch your eye to your head
touch your head to your eye
touch your shoulders to your elbow
touch your eyes and ears to your eyes and ears
touch your toes to your Toes
touch your shoulders to your knees toes
9.
say coke not pepsi or pop
say soda not soda or pepsi
say pepsi not koolaid or pop
say say not pepsi or pepsi
10.
public static void printStrings(String s, int n) {
    for (int i = 1; i <= n; i++) {
        System.out.print(s);
    }
    System.out.println();
}
11.
System.out.println is an overloaded method.
12.
The Temperature program changes the value of its tempc parameter on line 11, but this doesn't affect the variable tempc in main. The (incorrect) output is: Body temp in C is: 0.0
13.
1.6 2 36.0 64.0 10.0 116.0 7 5 -5 8.0 11.0 102.0 17.0 20.0 13.0 14.0
14.
3 0
1 2 4
4 3
5 2 4
8 1
5 9 4
15.
double grade = 2.7;
Math.round(grade);                               // grade = 2.7
grade = Math.round(grade);                       // grade = 3.0

double min = Math.min(grade, Math.floor(2.9));   //   min = 2.0

double x = Math.pow(2, 4);                       //     x = 16.0
x = Math.sqrt(64);                               //     x = 8.0

int count = 25;
Math.sqrt(count);                                // count = 25
count = (int) Math.sqrt(count);                  // count = 5

int a = Math.abs(Math.min(-1, -3));              //     a = 3
16.
public static int min(int n1, int n2, int n3) {
    return Math.min(n1, Math.min(n2, n3));
}
17.
public static int countQuarters(int cents) {
    return cents % 100 / 25;
}
18.
Kirk
My name is James
James Kirk
Kirk, Kames T.
T. is for Tiberius
19.
13 'a' 'G' 2 "GANDALF THE GRAY" -1 "o Baggins" "dalf the GR" "Goondoolf the GRAY" "Gandalf the GRAY" "strange1"
20.
6 19 "q.e.d." "ARCTURAN MEGADONKEY" "E." "egad" 4 1 13 -1 "Arcturan Megadonkeys" "b" "Cyber" "mega Corp"
21.
String quote = "Four score and seven years ago";
String expr1 = quote.substring(5, 10).toUpperCase();  // "SCORE"
String expr2 = quote.toLowerCase().substring(0, 4) + quote.substring(20, 26);  // "four years"
22.
Hello there. 1+2 is 3 and 1.5 squared is 2.25!
 There are 10 tokens: Hello : (String) there. : (String) 1+2 : (String) is : (String) 3 : (int, double, String) and : (String) 1.5 : (double, String) squared : (String) is : (String) 2.25! : (String)
23.
34.50 : The code will run successfully and the variable money will store the value 34.5. 6 : The code will run successfully and the variable money will store the value 6.0. $25.00 : The code will crash with an exception. million : The code will crash with an exception. 100*5 : The code will crash with an exception. 600x000 : The code will crash with an exception. none : The code will crash with an exception. 645 : The code will run successfully and the variable money will store the value 645.0.
24.
Scanner console = new Scanner(System.in);
System.out.print("Type an integer: ");
int number = console.nextInt();
System.out.println(number + " times 2 = " + (number * 2));
25.
import java.util.*;
public class SumNumbers {
    public static void main(String[] args) {
        Scanner console = new Scanner(System.in);
        System.out.print("low? ");
        int low = console.nextInt();
        System.out.print("high? ");
        int high = console.nextInt();
        int sum = 0;
        for (int i = low; i <= high; i++) {
            sum += i;
        }
        System.out.println("sum = " + sum);
    }
}
26.
Scanner console = new Scanner(System.in);
System.out.print("What is your phrase? ");
String phrase = console.nextLine();
System.out.print("How many times should I repeat it? ");
int times = console.nextInt();
for (int i = 1; i <= times; i++) {
    System.out.println(phrase);
}
-------------------------------------------------
1.
b. g.drawRect(10, 20, 50, 30);
2.
On the second line, the call to drawLine should be made on the Graphics object g, not on the DrawingPanel itself. On the second line, the order of the parameters is incorrect. DrawingPanel panel = new DrawingPanel(200, 200);
Graphics g = panel.getGraphics();
g.drawLine(50, 86, 20, 35);
3.
DrawingPanel panel = new DrawingPanel(200, 100);
Graphics g = panel.getGraphics();
g.setColor(Color.BLACK);
g.fillRect(10, 10, 50, 50);
g.setColor(Color.WHITE);
g.fillOval(10, 10, 50, 50);
4.
DrawingPanel panel = new DrawingPanel(200, 100);
Graphics g = panel.getGraphics();
g.drawRect(10, 20, 40, 20);
g.drawLine(10, 20, 50, 40);
5.

-------------------------------------------------
1.
z % 2 == 1 z <= Math.sqrt(y) y > 0 x % 2 != y % 2 y % z == 0 z != 0 Math.abs(y) > Math.abs(z) (x >= 0) == (z < 0) y % 10 == y z >= 0 x % 2 == 0 Math.abs(x - y) < Math.abs(z - y)
2.
true false true false true false false true true
3.
e. if (x == y) {
4.
line 5: if statement should use () parentheses, not {} brackets line 5: = should be == line 5: smaller is out of scope here line 10: void should be int line 13: => should be >= (or better yet, no if test is needed) line 16: should not write variable's type of int when returning it line 16: int smaller is out of scope here (declare outside if or return directly)
5.
Call Output a. ifElseMystery1(3, 20); 13 21 b. ifElseMystery1(4, 5); 5 6 c. ifElseMystery1(5, 5); 6 5 d. ifElseMystery1(6, 10); 7 11
6.
Call Output a. ifElseMystery2(10, 2); 10 6 b. ifElseMystery2(3, 8); 9 9 c. ifElseMystery2(4, 4); 3 4 d. ifElseMystery2(10, 30); 29 30
7.
Scanner console = new Scanner(System.in);
System.out.print("Type a number: ");
int number = console.nextInt();
if (number % 2 == 0) {
    System.out.println("even");
} else {
    System.out.println("odd");
}
8.
if (number % 2 == 0) {
    if (number % 3 == 0) {
        System.out.println("Divisible by 6.");
    }
} else {
    System.out.println("Odd.");
}
9.
if (name.equals("blue")) { ...
10.
a = 2;
if (x < 30) {
    x++;
}
System.out.println("Java is awesome! " + x);
11.
Scanner console = new Scanner(System.in);
System.out.print("Is your money multiplied 1 or 2 times? ");
int times = console.nextInt();
System.out.print("And how much are you contributing? ");
int donation = console.nextInt();
sum += times * donation;
total += donation;

if (times == 1) {
    count1++;
} else if (times == 2) {
    count2++;
}
12.
// Prompts for two people's money and reports how many $20 bills are needed.
import java.util.*;
public class Bills {
    public static void main(String[] args) {
        Scanner console = new Scanner(System.in);
        int numBills1 = getBills(console, "John");
        int numBills2 = getBills(console, "Jane");
        System.out.println("John needs " + numBills1 + " bills");
        System.out.println("Jane needs " + numBills2 + " bills");
    }

    public static int getBills(Scanner console, String name) {
        System.out.print("How much will " + name + " be spending? ");
        double amount = console.nextDouble();
        System.out.println();
        int numBills = (int) (amount / 20.0);
        if (numBills * 20.0 < amount) {
            numBills++;
        }
        return numBills;
    }
}
13.
Scanner console = new Scanner(System.in);
System.out.print("What color do you want? ");
String choice = console.nextLine();
if (choice.equalsIgnoreCase("r")) {
    System.out.println("You have chosen Red.");
} else if (choice.equalsIgnoreCase("g")) {
    System.out.println("You have chosen Green.");
} else if (choice.equalsIgnoreCase("b")) {
    System.out.println("You have chosen Blue.");
} else {
    System.out.println("Unknown color: " + choice);
}
14.
Scanner console = new Scanner(System.in);
System.out.print("Enter a card: ");
String rank = console.next();
String suit = console.next();
if (rank.equals("2")) {
    rank = "Two";
} else if (rank.equals("3")) {
    rank = "Three";
} else if (rank.equals("4")) {
    rank = "Four";
} else if (rank.equals("5")) {
    rank = "Five";
} else if (rank.equals("6")) {
    rank = "Six";
} else if (rank.equals("7")) {
    rank = "Seven";
} else if (rank.equals("8")) {
    rank = "Eight";
} else if (rank.equals("9")) {
    rank = "Nine";
} else if (rank.equals("10")) {
    rank = "Ten";
} else if (rank.equals("J")) {
    rank = "Jack";
} else if (rank.equals("Q")) {
    rank = "Queen";
} else if (rank.equals("K")) {
    rank = "King";
} else { // rank.equals("A")
    rank = "Ace";
}

if (suit.equals("C")) {
    suit = "Clubs";
} else if (suit.equals("D")) {
    suit = "Diamonds";
} else if (suit.equals("H")) {
    suit = "Hearts";
} else { // suit.equals("S")
    suit = "Spades";
}

System.out.println(rank + " of " + suit);
15.
public static int sumTo(int n) {
    int sum = 0;
    for (int i = 1; i <= n; i++) {
        sum += i;
    }
    return sum;
}
16.
public static int countFactors(int n) {
    int count = 0;
    for (int i = 1; i <= n; i++) {
        if (n % i == 0) {
            count++;
        }
    }
    return count;
}
17.
Scanner console = new Scanner(System.in);
System.out.print("How many numbers? ");
int count = console.nextInt();
int product = 1;
for (int i = 1; i <= count; i++) {
    System.out.print("Next number --> ");
    int num = console.nextInt();
    product *= num;
}
System.out.println("Product = " + product);
18.

19.
double gpa = 3.2;
double diff = Math.abs(gpa * 3 - 9.6);
if (diff < 0.1) {
    System.out.println("You earned enough credits.");
}
20.
efg
nopqrs

qr
21.
if (Character.isUpperCase(theString.charAt(0))) {
    ...
}
22.
int count = 0;
for (int i = 0; i < s.length(); i++) {
    if (Character.toLowerCase(s.charAt(i)) == 'e') {
        count++;
    }
}
 s = s.toLowerCase();
int count = 0;
for (int i = 0; i < s.length(); i++) {
    if (s.charAt(i) == 'e') {
        count++;
    }
}
23.
String name = "Marla Singer";
int space = name.indexOf(" ");
String lastName = name.substring(space + 1);
String firstInitial = name.substring(0, 1);
String lastNameFirstInitial = lastName + ", " + firstInitial + ".";
System.out.println(lastNameFirstInitial);
24.
// assuming that the String is stored in the variable str
int count = 0;
for (int i = 0; i < str.length(); i++) {
    if (Character.toLowerCase(str.charAt(i)) >= 'n') {
        count++;
    }
}
System.out.println(count + " letters come after n.");
25.
All three side lengths passed are >= 0. No side's length exceeds the sum of any two other sides.
26.

27.
public static int medianOf3(int n1, int n2, int n3) {
    if (n1 < n2 && n1 < n3) {
        if (n2 < n3) {
            return n2;
        } else {
            return n3;
        }
    } else if (n2 < n1 && n2 < n3) {
        if (n1 < n3) {
            return n1;
        } else {
            return n3;
        }
    } else { // (n3 < n1 && n3 < n2)
        if (n1 < n2) {
            return n1;
        } else {
            return n2;
        }
    }
}
 public static int medianOf3(int n1, int n2, int n3) {
    return Math.max(Math.max(Math.min(n1, n2), Math.min(n2, n3)), Math.min(n1, n3));
}
28.
// Throws an exception if a, b, c are invalid
public static void quadratic(int a, int b, int c) {
    double determinant = b * b - 4 * a * c;
    if (a == 0) {
        throw new IllegalArgumentException( "Invalid a value of 0");
    }
    if (determinant < 0) {
        throw new IllegalArgumentException( "Invalid determinant");
    }
    ... 
}
29.
public static void printNumOdd(int n1, int n2, int n3) {
    int count = 0;
    if (n1 % 2 != 0) {
        count++;
    }
    if (n2 % 2 != 0) {
        count++;
    }
    if (n3 % 2 != 0) {
        count++;
    }
    System.out.println(count + " of the 3 numbers are odd.");
}
 public static void printNumOdd(int n1, int n2, int n3) {
    int count = n1 % 2 + n2 % 2 + n3 % 2;
    System.out.println(count + " of the 3 numbers are odd.");
}
-------------------------------------------------
1.
Executes body 10 times. Output is: 1 11 21 31 41 51 61 71 81 91 Executes body 0 times. No output. Loops infinitely. Output is: 250
250
250
...
 Executes body 3 times. Output is: 2 4 16 Executes body 5 times. Output is: bbbbbabbbbb Executes body 7 times. Output is: 10
5
2
1
0
0
0
2.
int n = 1;
while (n <= max) {
    System.out.println(n);
    n++;
}
 int total = 25;
int number = 1;
while (number <= (total / 2)) {
    total = total - number;
    System.out.println(total + " " + number);
    number++;
}
 int i = 1;
while (i <= 2) {
    int j = 1;
    while (j <= 3) {
        int k = 1;
        while (k <= 4) {
            System.out.print("*");
            k++;
        }
        System.out.print("!");
        j++;
    }
    System.out.println();
    i++;
}
 int number = 4;
int count = 1;
while (count <= number) {
    System.out.println(number);
    number = number / 2;
    count++;
}
3.
Call Output a. mystery(1); 1 0 b. mystery(6); 4 2 c. mystery(19); 16 4 d. mystery(39); 32 5 e. mystery(74); 64 6
4.
Call Output a. mystery(19); 19 0 b. mystery(42); 21 1 c. mystery(48); 3 4 d. mystery(40); 5 3 e. mystery(64); 1 6
5.
0 through 99 inclusive 50 through 69 inclusive 0 through 69 inclusive -20 through 79 inclusive 0, 4, 8, 12, 16, 20, 24, 28, 32, or 36
6.
Random rand = new Random();
int num = rand.nextInt(11);
7.
Random rand = new Random();
int num = rand.nextInt(25) * 2 + 51;
8.
Executes body 10 times. Output is: 1 11 21 31 41 51 61 71 81 91 Loops infinitely. Output is: count down: 10
count down: 9
count down: 8
count down: 7
count down: 6
count down: 5
count down: 4
count down: 3
count down: 2
count down: 1
count down: 0
count down: -1
...
 Loops infinitely. Output is: 250
250
250
...
 Executes body 2 times. Output is: 100
50
 Executes body 3 times. Output is: 2 4 16 Executes body 5 times. Output is: bbbbbabbbbb Executes body 7 times. Output is: 10
5
2
1
0
0
0
 Executes body 3 times. Output is: /\/\/\/\/\/\/\/\
9.
Scanner console = new Scanner(System.in);
String response;
do {
    System.out.println("She sells seashells by the seashore.");
    System.out.print("Do you want to hear it again? ");
    response = console.nextLine();
} while (response.equals("y"));
10.
public static int zeroDigits(int number) {
    int count = 0;
    do {
        if (number % 10 == 0) {
            count++;
        }
        number = number / 10;
    } while (number > 0);
    return count;
}
11.
Scanner console = new Scanner(System.in);
Random rand = new Random();
int num;
do {
    num = rand.nextInt(1000);
    System.out.println("Random number: " + num);
} while (num < 900);
12.
public static void printLetters(String text) {
    if (text.length() > 0) {
        System.out.print(text.charAt(0));
        for (int i = 1; i < text.length(); i++) {
            System.out.print("-" + text.charAt(i));
        }
    }
    System.out.println();   // to end the line of output
}
13.
int SENTINEL = -1;
System.out.print("Type a number (or " + SENTINEL + " to stop): ");
Scanner console = new Scanner(System.in);
int input = console.nextInt();
int min = input;
int max = input;
while (input != SENTINEL) {
    if (input < min) {
        min = input;
    } else if (input > max) {
        max = input;
    }

    System.out.print("Type a number (or " + SENTINEL + " to stop): ");
    input = console.nextInt();
}

if (min != SENTINEL) {
    System.out.println("Maximum was " + max);
    System.out.println("Minimum was " + min);
}
14.
true true false true true false false true true true true false
15.
public static boolean isVowel(char c) {
    c = Character.toLowerCase(c);   // case-insensitive
    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
}
 or: public static boolean isVowel(char c) {
    return "aeiouAEIOU".indexOf(c) >= 0;
}
16.
public static boolean isPrime(int n) {
    boolean prime = true;
    for (int i = 2; i < n; i++) {
        if (n % i == 0) {
            prime = false;
        }
    }
    return prime;
}
17.
public static boolean contains(String str, char ch) {
    boolean found = false;
    for (int i = 0; i < str.length(); i++) {
        if (str.charAt(i) == ch) {
            found = true;
        }
    }
    return found;
}
18.
public static boolean startEndSame(String str) {
    return str.charAt(0) == str.charAt(str.length() - 1);
}
19.
public static boolean hasPennies(int cents) {
    return cents % 5 != 0;
}
20.
Call Value Returned a. mystery(3, 3) 3 b. mystery(5, 3) 1 c. mystery(2, 6) 2 d. mystery(12, 18) 6 e. mystery(30, 75) 15
21.
int days = getTotalDaysSince1980();
year = 1980;
while (days > 365) {   // subtract out years
    if (isLeapYear(year)) {
        if (days > 366) {
            days -= 366;
            year += 1;
        } else {     // new code here
            break;   // new code here
        }            // new code here
    } else {
        days -= 365;
        year += 1;
    }
}
22.
d. (2 != 3) || (-1 >= 5) || !isPrime(n)
23.
!b (x <= y) || (y <= z) (x != y) && (x > z) (x % 2 == 0) || !b (x / 2 != 13) && !b && (z * 3 != 96) (z >= x) || (z <= y && x < y)
24.
Scanner console = new Scanner(System.in);
System.out.print("Type your age: ");
while (!console.hasNextInt()) {
    console.next(); // throw away offending token
    System.out.print("Type your age: ");
}
int age = console.nextInt();

print("Type your GPA: ");
while (!console.hasNextDouble()) {
    console.next(); // throw away offending token
    System.out.print("Type your GPA: ");
}
double gpa = console.nextDouble();
System.out.println("age = " + age + ", GPA = " + gpa);
25.
Type something for me! Jane
Your name is Jane
 Type something for me! 56
Your IQ is 56
 Type something for me! 56.2
Your name is 56.2
26.
Scanner console = new Scanner(System.in);
System.out.print("Type a number: ");
if (console.hasNextInt()) {
    int value = console.nextInt();
    System.out.println("You typed the integer " + value);
} else if (console.hasNextDouble()) {
    double value = console.nextDouble();
    System.out.println("You typed the real number " + value);
}
27.
String prompt = "Please enter a number: ";
Scanner console = new Scanner(System.in);
int num1 = getInt(console, prompt);
int num2 = getInt(console, prompt);
int num3 = getInt(console, prompt);
double average = (num1 + num2 + num3) / 3.0;
System.out.println("Average: " + average);
28.
Point y < x y == 0 count > 0 Point A SOMETIMES SOMETIMES NEVER Point B ALWAYS SOMETIMES SOMETIMES Point C ALWAYS ALWAYS ALWAYS Point D SOMETIMES SOMETIMES SOMETIMES Point E NEVER SOMETIMES SOMETIMES
29.
Point n > b a > 1 b > a Point A SOMETIMES SOMETIMES SOMETIMES Point B ALWAYS SOMETIMES SOMETIMES Point C SOMETIMES ALWAYS ALWAYS Point D SOMETIMES ALWAYS NEVER Point E NEVER SOMETIMES SOMETIMES
30.
Point next == 0 prev == 0 next == prev Point A SOMETIMES ALWAYS SOMETIMES Point B NEVER SOMETIMES SOMETIMES Point C NEVER NEVER ALWAYS Point D SOMETIMES NEVER SOMETIMES Point E ALWAYS SOMETIMES SOMETIMES
-------------------------------------------------
1.
Scanner input = new Scanner(new File("input.txt"));
2.
Scanner input = new Scanner(new File("test.dat"));
3.
b. Scanner input = new Scanner(new File("example.txt"));
4.
Scanner input = new Scanner(new File("input.txt"));
5.
c. "welcome...to", "the", "matrix."
6.
b. "in", "fourteen-hundred", "92", "columbus", "sailed", "the", "ocean", "blue", ":)"
7.
Hello (string) there,how (string) are (string) you? (string) I (string) am (string) "very (string) well", (string) thank (string) you. (string) 12 (integer, real number, string) 34 (integer, real number, string) 5.67 (real number, string) (8 (string) + (string) 9) (string) "10" (string)
8.
Scanner input = new Scanner(new File("C:/temp/new files/test.dat"));
9.
"numbers.dat" or "C:/Documents and Settings/amanda/My Documents/programs/numbers.dat" "data/homework6/input.dat" or "C:/Documents and Settings/amanda/My Documents/programs/data/homework6/input.dat" There is only one legal way to refer to this file: by its absolute path, "C:/Documents and Settings/amanda/My Documents/homework/data.txt"
10.
"names.txt" or "/home/amanda/Documents/hw6/names.txt" "data/numbers.txt" or "/home/amanda/Documents/hw6/data/numbers.txt" There is only one legal way to refer to this file: by its absolute path, "/home/amanda/download/saved.html"
11.
line 2: main method must say throws FileNotFoundException when constructing a file Scanner line 3: must create a new File when declaring the Scanner line 9: should not declare another Scanner for the file line 13: nextLine should be hasNextLine line 14: line should be nextLine line 16: need a second line Scanner to read the tokens of each line line 16: hasNext should be next() line 19: need to add 3 println statements to print line/word stats
12.
input: 6.7        This file has
input:         several input lines.
input: 
input:   10 20         30   40
input: 
input: test
6 total
13.
input: 6.7
input: This
input: file
input: has
input: several
input: input
input: lines.
input: 10
input: 20
input: 30
input: 40
input: test
12 total
14.
0 total
 input: 6.7
1 total
15.
a. the quick brown
   fox   jumps
 
       over
the lazy    dog
 b. the
quick
brown
fox
jumps
over
the
lazy
dog
16.
import java.io.*;
import java.util.*;

public class PrintMyself {
    public static void main(String[] args) throws FileNotFoundException {
        Scanner input = new Scanner(new File("PrintMyself.java"));
        while (input.hasNextLine()) {
            System.out.println(input.nextLine());
        }
    }
}
17.
public static void printEntireFile() throws FileNotFoundException {
    Scanner console = new Scanner(System.in);
    System.out.print("Type a file name: ");
    String filename = console.nextLine();
    Scanner input = new Scanner(new File(filename));
    while (input.hasNextLine()) {
        System.out.println(input.nextLine());
    }
}
18.
// precondition: no line in input is longer than width
public static void printBox(Scanner input, int width) {
    printTopBottom(width);
    while (input.hasNextLine()) {
        String line = input.nextLine();
        System.out.print("| " + line);
        for (int i = line.length(); i < width; i++) {
            System.out.print(" ");
        }
        System.out.println(" |");
    }
    printTopBottom(width);
}

public static void printTopBottom(int width) {
    System.out.print("+");
    for (int i = 0; i < width + 2; i++) {
        System.out.print("-");
    }
    System.out.println("+");
}
19.

20.
PrintStream out = new PrintStream(new File("message.txt"));
out.println("Testing,");
out.println("1, 2, 3.");
out.println();
out.println("This is my output file.");
21.
public static String getFileName() {
    Scanner console = new Scanner(System.in);
    String filename = "";
    do {
        System.out.print("Type a file name: ");
        filename = console.nextLine();
    } while (!(new File(filename).exists()));
    return filename;
}
22.
// reprompts until file name is valid
public static void printEntireFile2() throws FileNotFoundException {
    String filename = getFileName();
    Scanner input = new Scanner(new File(filename));
    while (input.hasNextLine()) {
        System.out.println(input.nextLine());
    }
}
-------------------------------------------------
1.
e. int[] a = new int[10];
2.
First element: numbers[0] Last element: numbers[9] or numbers[numbers.length - 1]
3.
int[] data = new int[5];
data[0] = 27;
data[1] = 51;
data[2] = 33;
data[3] = -1;
data[4] = 101;
4.
int[] odds = new int[22];
for (int i = 0; i < 22; i++) {
    odds[i] = i * 2 - 5;
}
5.
[0, 4, 11, 0, 44, 0, 0, 2]
6.
[3, 3, 0, 0, 6, 9, 0, -18]
7.
// print the array elements
System.out.println(Arrays.toString(first));
System.out.println(Arrays.toString(second));

// see if the elements are the same
if (Arrays.equals(first, second)) {
    ...
8.
a. int[] a = {17, -3, 42, 5, 9, 28};
9.
int[] data = {7, -1, 13, 24, 6};
10.
public static int max(int[] data) {
    int max = data[0];
    for (int i = 1; i < data.length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    return max;
}
11.
public static double average(int[] a) {
    double mean = 0.0;
    for (int i = 0; i < a.length; i++) {
        mean += a[i];
    }
    return mean / a.length;
}
12.

13.
for (int i = 0; i < data.length; i++) {
    System.out.println("element [" + i + "] is " + data[i]);
}
14.
[3, 24, 8, -5, 6, 1]
15.
public static void printBackwards(int[] list) {
    if (list.length == 0) {
        System.out.println("[]");
    } else {
        System.out.print("[" + list[list.length - 1]);
        for (int i = list.length - 2; i >= 0; i--) {
            System.out.print(", " + list[i]);
        }
        System.out.println("]");
    }
}
16.

17.
public static boolean allLess(int[] list1, int[] list2) {
    if (list1.length != list2.length) {
        return false;
    }
    for (int i = 0; i < list1.length; i++) {
        if (list1[i] >= list2[i]) {
            return false;
        }
    }
    return true;
}
18.

19.
2 [0, 0, 1, 0]
1 [0, 0, 1, 0]
3 [0, 0, 1, 1]
2 [0, 0, 1, 1]
20.
2 [0, 1]
1 [0, 1]
1 [1, 2]
0 [1, 2]
21.
public static void swapPairs(int[] list) {
    for (int i = 0; i < list.length - 1; i += 2) {
        swap(list, i, i + 1);
    }
}
22.
[20, 30, 40, 50, 60, 70, 80, 90, 100, 100]
23.
[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
24.
a1: [26, 19, 14, 11, 10] a2: [1, 4, 9, 16, 25]
25.
a1: [1, 3, -3, 13, -4, -24, -6, -14] a2: [1, 1, 2, 3, 5, 8, 13, 21]
26.
[7, 3, 1, 0, 8, 18, 5, -1, 5]
27.
0 9 6 8 2
28.
[8] [14, 8] [7, 2, 3, 3, 1, 4] [10, 9, 9, 6, 6] [12, 12, 11, 11, 9, 8]
29.
public static double averageLength(String[] strings) {
    int sum = 0;
    for (int i = 0; i < strings.length; i++) {
        sum += strings[i].length();
    }
    return (double) sum / strings.length;
}
30.
public static boolean isPalindrome(String[] array) {
    for (int i = 0; i < array.length / 2; i++) {
        if (!array[i].equals(array[array.length - 1 - i])) {
            return false;
        }
    }
    return true;
}
31.
[[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]]
32.
for (int i = 0; i < 7; i++) {
    data[2][i] = i + 1;
}
33.
int[][] table = new int[5][10];
for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 10; j++) {
        table[i][j] = i * j;
    }
}
34.
for (int i = 0; i < 6; i++) {
    matrix[i][4] = matrix[i][1];
}
35.
[[4, 5, 6, 6], [5, 6, 7, 7], [6, 7, 8, 8]]
36.
int[][] jagged = new int[5][];
int value = 1;
for (int i = 0; i < 5; i++) {
    jagged[i] = new int[i + 1];
    for (int j = 0; j < i + 1; j++) {
        jagged[i][j] = value;
        value++;
    }
}
37.
If the 2D array is named pixels, the DrawingPanel's height is stored as pixels.length and its width is stored as pixels[0].length .
38.
public static void toRedChannel(DrawingPanel panel) {
    Color[][] pixels = panel.getPixels();
    for (int row = 0; row < pixels.length; row++) {
        for (int col = 0; col < pixels[0].length; col++) {
            // your code goes here
            pixel = DrawingPanel.getRed(pixels[row][col]);
        }
    }
    panel.setPixels(pixels);
}
39.
The panel will display a diagonal gradient of black to white, like the following image:
-------------------------------------------------
1.

2.

3.

4.
14 14
7 9 14 2
18 18
7 9 14 18
5.

6.

7.
// A Name object represents a name such as "John Q. Public".
public class Name {
    String firstName;
    char middleInitial;
    String lastName;
}
8.

9.
d. double result = acct.computeInterest(42);
10.
// Returns the distance from this point to the given other point.
public double distance(Point other) {
    int dx = x - other.x;
    int dy = y - other.y;
    return Math.sqrt(dx * dx + dy * dy);
}
11.
// A Name object represents a name such as "John Q. Public".
public class Name {
    String firstName;
    char middleInitial;
    String lastName;

    // The name in normal order such as "John Q. Public".
    public String getNormalOrder() {
        return firstName + " " + middleInitial + ". " + lastName;
    }

    // The name in reverse order such as "Public, John Q.".
    public String getReverseOrder() {
        return lastName + ", " + firstName + " " + middleInitial + ".";
    }
}
12.

13.
c. System.out.println(p1.toString());
14.
// Returns a String representation of this point, such as "java.awt.Point[x=7,y=2]".
public String toString() {
    return "java.awt.Point[x=" + x + ", y=" + y + "]";
}
15.
// Returns a String representation of this Name, such as "John Q. Public".
public String toString() {
    return firstName + " " + middleInitial + ". " + lastName;
}
 or: // Returns a String representation of this Name, such as "John Q. Public".
public String toString() {
    return getNormalOrder();
}
16.
// construct two Point objects, one at (8, 2) and one at (4, 3)
Point p1 = new Point(8, 2);
Point p2 = new Point(4, 3);

// display the two Point objects' state
System.out.println("p1 is " + p1);
System.out.println("p2 is " + p2);

// display p1 distance from origin
System.out.println("p1's distance from origin is " + p1.distanceFromOrigin());

// translate p1 to (9, 4)
// translate p2 to (3, 13)
p1.translate(1, 2);
p2.translate(-1, 10);

// display the two Point objects' state again
System.out.println("p1 is now " + p1);
System.out.println("p2 is now " + p2);
17.

18.
The constructor shouldn't have the void keyword in its header, because constructors have no return type. The header should be: public Point(int x, int y) {
 The fields x and y shouldn't have their types redeclared in front of them. This bug causes shadowing of the fields. Here are the corrected lines: x = initialX;
y = initialY;
19.
// A Name object represents a name such as "John Q. Public".
public class Name {
    String firstName;
    char middleInitial;
    String lastName;

    // Initializes a new Name with the given values.
    public Name(String initialFirst, char initialMiddle, String initialLast) {
        firstName = initialFirst;
        middleInitial = initialMiddle;
        lastName = initialLast;
    }

    // The name in normal order such as "John Q. Public".
    public String getNormalOrder() {
        return firstName + " " + middleInitial + ". " + lastName;
    }

    // The name in reverse order such as "Public, John Q.".
    public String getReverseOrder() {
        return lastName + ", " + firstName + " " + middleInitial + ".";
    }
}
20.

21.
// Constructs a Point object with the same x and y
// coordinates as the given Point.
public Point(Point p) {
    this.x = p.x;
    this.y = p.y;
}
 or: // Constructs a Point object with the same x and y
// coordinates as the given Point.
public Point(Point p) {
    this(p.x, p.y);   // call the (int, int) constructor
}
22.

23.

24.

25.
// Sets this Point's x coordinate to the given value.
public void setX(int newX) {
    x = newX;
}

// Sets this Point's y coordinate to the given value.
public void setY(int newY) {
    y = newY;
}
26.
// A Name object represents a name such as "John Q. Public".
public class Name {
    private String firstName;
    private char middleInitial;
    private String lastName;

    // Initializes a new Name with the given values.
    public Name(String initialFirst, char initialMiddle, String initialLast) {
        firstName = initialFirst;
        middleInitial = initialMiddle;
        lastName = initialLast;
    }

    // Returns the person's first name.
    public String getFirstName() {
        return firstName;
    }

    // Returns the person's middle initial.
    public char getMiddleInitial() {
        return middleInitial;
    }

    // Returns the person's last name.
    public String getLastName() {
        return lastName;
    }

    // The name in normal order such as "John Q. Public".
    public String getNormalOrder() {
        return firstName + " " + middleInitial + ". " + lastName;
    }

    // The name in reverse order such as "Public, John Q.".
    public String getReverseOrder() {
        return lastName + ", " + firstName + " " + middleInitial + ".";
    }
}
27.
// Sets the first name to the given value.
public void setFirstName(String firstName) {
    this.firstName = firstName;
}

// Sets the last name to the given value.
public void setLastName(String lastName) {
    this.lastName = lastName;
}

// Sets the middle initial to the given value.
public void setMiddleInitial(char middleInitial) {
    this.middleInitial = middleInitial;
}
28.

29.

30.

31.
// Returns this Stock's symbol value.
public String getSymbol() {
    return symbol;
}

// Returns this Stock's total number of shares purchased.
public int getTotalShares() {
    return totalShares;
}

// Returns this Stock's total cost for all shares.
public double getTotalCost() {
    return totalCost;
}
-------------------------------------------------
1.

2.

3.
a. public class A extends B {
4.
Vehicle v = new Car();   // legal Vehicle v = new SUV();   // legal Car c = new SUV();       // legal SUV s = new SUV();       // legal SUV s = new Car();       // illegal Car c = new Vehicle();   // illegal
5.

6.

7.
public UndergraduateStudent(String name) {
    super(name, 18);
    year = 0;
}
8.
public void setAge(int age) {
    super.setAge(age);
    year++;
}
9.
vroom
car 1
car 2
vroom
truck 1
car 2
10.
vroomvroom
truck 1
car 1
11.
B 2
A
A 1

D 2
C
C 1

A 2
A
A 1

A 2
C
C 1
12.
flute
shoe 1
flute 2

flute
blue 1
flute 2

moo
moo 1
moo 2

moo
blue 1
moo 2
13.
moo 2
blue 1
moo

moo 2
moo 1
moo

flute 2
shoe 1
flute

flute 2
blue 1
flute
14.
squid
creature 1
tentacles

BIG!
spout
creature 2

ocean-dwelling
creature 1
creature 2

ocean-dwelling
warm-blooded
creature 2
15.
creature 2
ocean-dwelling
creature 1

tentacles
squid
creature 1

creature 2
ocean-dwelling
warm-blooded

creature 2
BIG!
spout
16.
Bay 1  Pond 2
Ocean 2
Lake 3  Ocean 2

Pond 1
Pond 2
Pond 3

Pond 1
Pond 2
Lake 3  Pond 2

Bay 1  Pond 2
Bay 2
Lake 3  Bay 2
17.
Bay 1  Pond 2
Bay 1  Pond 2
Ocean 2
Ocean 2
Lake 3  Ocean 2
18.

19.

20.

21.

22.

23.

24.
import java.awt.*;

// Represents items that have a color that can be retrieved.
public interface Colored {
    public Color getColor();
}
25.
// Represents a point with a color. import java.awt.*;
public class ColoredPoint extends Point implements Colored {
    private Color color;

    // Constructs a new colored point with the given
    // coordinates and color.
    public ColoredPoint(int x, int y, Color color) {
        super(x, y);
        this.color = color;
    }

    // Returns this point's color.
    public Color getColor() {
        return color;
    }
}
26.
// A general interface for shape classes.
public interface Shape {
    public double getArea();
    public double getPerimeter();
    public int getSideCount();
}
 // Returns the number of sides a circle has (0).
public int getSideCount() {
    return 0;
}

// Returns the number of sides a rectangle has (4).
public int getSideCount() {
    return 4;
}

// Returns the number of sides a triangle has (3).
public int getSideCount() {
    return 3;
}
27.

28.

29.

-------------------------------------------------
1.

2.
e. ArrayList<Integer> list = new ArrayList<Integer>();
3.
ArrayList<String> list = new ArrayList<String>();
list.add("It");
list.add("was");
list.add("a");
list.add("stormy");
list.add("night");
4.
list.add(3, "dark");
list.add(4, "and");
5.
list.set(1, "IS");
6.
for (int i = 0; i < list.size(); i++) {
    if (list.get(i).indexOf("a") >= 0) {
        list.remove(i);
        i--;   // so the new element i will be checked
    }
}
7.
ArrayList<Integer> numbers = new ArrayList<Integer>();
for (int i = 0; i < 10; i++) {
    numbers.add(2 * i);
}
8.
public static int maxLength(ArrayList<String> list) {
    int max = 0;
    for (int i = 0; i < list.size(); i++) {
        String s = list.get(i);
        if (s.length() > max) {
            max = s.length();
        }
    }
    return max;
}
9.
System.out.println(list.contains("IS"));
10.
System.out.println(list.indexOf("stormy"));
System.out.println(list.indexOf("dark"));
11.
for (String s : list) {
    System.out.println(s.toUpperCase());
}
12.

13.
ArrayList<Integer> numbers = new ArrayList<Integer>();
14.

15.
[1, 2, 6, 8] [10, 30, 40, 20, 60, 50] [-4, 1, 25, 4, 16, 9, 64, 36, 49]
16.
[20, 10, 20, 30, 30, 20] [8, 7, 8, 2, 9, 7, 4, 4, 2, 8] [33, 28, 33, -1, 3, 28, 17, 9, 33, 17, -1, 33]
17.
[72, 20] [1, 20, 18, 15, 11, 6] [10, 90, 70, 40]
18.
[31, 21, 11] [5, 8, 10, 3, 9] [34, 10, 18, 29, 4, 0]
19.
Collections.sort(list);
20.

21.
n1.compareTo(n2) > 0 n3.compareTo(n1) == 0 n2.compareTo(n1) < 0 s1.compareTo(s2) < 0 s3.compareTo(s1) > 0 s2.compareTo(s2) == 0
22.
Scanner console = new Scanner(System.in);
System.out.print("Type a name: ");
String name1 = console.nextLine();
System.out.print("Type a name: ");
String name2 = console.nextLine();
if (name1.compareTo(name2) < 0) {
    System.out.println(name1 + " goes before " + name2);
} else if (name1.compareTo(name2) > 0) {
    System.out.println(name1 + " goes after " + name2);
} else { // equal
    System.out.println(name1 + " is the same as " + name2);
}
23.
Scanner console = new Scanner(System.in);
System.out.print("Type a message to sort: ");
String message = console.nextLine();
ArrayList<String> words = new ArrayList<String>();
Scanner lineScan = new Scanner(message);
while (lineScan.hasNext()) {
    words.add(lineScan.next());
}

System.out.print("Your message sorted: ");
Collections.sort(words);
for (String word : words) {
    System.out.print(word + " ");
}
System.out.println();   // to end the line of output
-------------------------------------------------
1.

2.

3.

4.
public static int countDuplicates(LinkedList<Integer> list) {
    int count = 0;
    Iterator<Integer> i = list.iterator();
    int prev = i.next();
    while (i.hasNext()) {
        int next = i.next();
        if (prev == next) {
            count++;
        }
        prev = next;
    }
    return count;
}
5.
public static void insertInOrder(LinkedList<String> list, String value) {
    int index = 0;
    Iterator<String> i = list.iterator();
    String next = i.next();
    
    // advance until the proper index
    while (i.hasNext() && next.compareTo(value) < 0) {
        next = i.next();
        index++;
    }
    
    list.add(index, value);
}
6.
public static void removeAll(LinkedList<Integer> l... (32 KB left)
